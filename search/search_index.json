{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"These documentation pages are still a work in progress. Opensource MVC framework for creating your Roblox games Overview Dragon Engine is a singleton-oriented MVC Lua framework designed specificially for Roblox. It seamlessly bridges the gap between the server and client, globally loads modules to allow for easy code communication (this also helps to prevent cyclic requiring), and is designed to serve as the 'backbone' of the game it is in. Why Dragon Engine? Dragon Engine is designed to streamline the operations of your game. Instead of worrying about the boilerplate of your game (networking, code communication, etc), the framework takes care of this for you through the use of abstraction layers. There's no more need to directly interface with remotes while worrying about managing their connections. The framework takes care of this automatically, letting you focus on the important stuff. Getting started To get started with the framework, head on over to the getting started section!","title":"Home"},{"location":"#overview","text":"Dragon Engine is a singleton-oriented MVC Lua framework designed specificially for Roblox. It seamlessly bridges the gap between the server and client, globally loads modules to allow for easy code communication (this also helps to prevent cyclic requiring), and is designed to serve as the 'backbone' of the game it is in.","title":"Overview"},{"location":"#why-dragon-engine","text":"Dragon Engine is designed to streamline the operations of your game. Instead of worrying about the boilerplate of your game (networking, code communication, etc), the framework takes care of this for you through the use of abstraction layers. There's no more need to directly interface with remotes while worrying about managing their connections. The framework takes care of this automatically, letting you focus on the important stuff.","title":"Why Dragon Engine?"},{"location":"#getting-started","text":"To get started with the framework, head on over to the getting started section!","title":"Getting started"},{"location":"Test/","text":"Header Some text Testing stuff CAUTION! Put very very scary text in here. Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. setmetatable(Table_1,{__index = Table_2}) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 --[[ Example Service This is an example service to display how a service is created and how it should be formatted. --]] local ExampleService = {} --------------------- -- Roblox Services -- --------------------- ------------- -- DEFINES -- ------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- -- @Name : Init -- @Description : Called when the service module is first loaded. ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- function ExampleService : Init () self:DebugLog( \"[Example Service] Initialized!\" ) end ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- -- @Name : Start -- @Description : Called after all services are loaded. ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- function ExampleService : Start () self:DebugLog( \"[Example Service] Started!\" ) end return ExampleService Code is cool Text describing code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 --[[ Example Service This is an example service to display how a service is created and how it should be formatted. --]] local ExampleService = {} --------------------- -- Roblox Services -- --------------------- ------------- -- DEFINES -- ------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- -- @Name : Init -- @Description : Called when the service module is first loaded. ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- function ExampleService : Init () self:DebugLog( \"[Example Service] Initialized!\" ) end ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- -- @Name : Start -- @Description : Called after all services are loaded. ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- function ExampleService : Start () self:DebugLog( \"[Example Service] Started!\" ) end return ExampleService Collapsable code Text describing code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 --[[ Example Service This is an example service to display how a service is created and how it should be formatted. --]] local ExampleService = {} --------------------- -- Roblox Services -- --------------------- ------------- -- DEFINES -- ------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- -- @Name : Init -- @Description : Called when the service module is first loaded. ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- function ExampleService : Init () self:DebugLog( \"[Example Service] Initialized!\" ) end ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- -- @Name : Start -- @Description : Called after all services are loaded. ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- function ExampleService : Start () self:DebugLog( \"[Example Service] Started!\" ) end return ExampleService Tabbed code blocks This is a block of tabbed code. Bash 1 2 3 #!/bin/bash STR = \"Hello World!\" echo $STR C 1 2 3 4 5 #include int main(void) { printf( \"hello, world \\n \" ); } C++ 1 2 3 4 5 6 #include <iostream> int main () { std :: cout << \"Hello, world! \\n \" ; return 0 ; } C# 1 2 3 4 5 6 7 using System; class Program { static void Main ( string [] args) { Console.WriteLine( \"Hello, world!\" ); } } The bottom Oh no you've reached the bottom!","title":"Test"},{"location":"Test/#header","text":"Some text","title":"Header"},{"location":"Test/#testing-stuff","text":"CAUTION! Put very very scary text in here. Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. setmetatable(Table_1,{__index = Table_2}) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 --[[ Example Service This is an example service to display how a service is created and how it should be formatted. --]] local ExampleService = {} --------------------- -- Roblox Services -- --------------------- ------------- -- DEFINES -- ------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- -- @Name : Init -- @Description : Called when the service module is first loaded. ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- function ExampleService : Init () self:DebugLog( \"[Example Service] Initialized!\" ) end ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- -- @Name : Start -- @Description : Called after all services are loaded. ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- function ExampleService : Start () self:DebugLog( \"[Example Service] Started!\" ) end return ExampleService Code is cool Text describing code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 --[[ Example Service This is an example service to display how a service is created and how it should be formatted. --]] local ExampleService = {} --------------------- -- Roblox Services -- --------------------- ------------- -- DEFINES -- ------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- -- @Name : Init -- @Description : Called when the service module is first loaded. ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- function ExampleService : Init () self:DebugLog( \"[Example Service] Initialized!\" ) end ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- -- @Name : Start -- @Description : Called after all services are loaded. ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- function ExampleService : Start () self:DebugLog( \"[Example Service] Started!\" ) end return ExampleService Collapsable code Text describing code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 --[[ Example Service This is an example service to display how a service is created and how it should be formatted. --]] local ExampleService = {} --------------------- -- Roblox Services -- --------------------- ------------- -- DEFINES -- ------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- -- @Name : Init -- @Description : Called when the service module is first loaded. ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- function ExampleService : Init () self:DebugLog( \"[Example Service] Initialized!\" ) end ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- -- @Name : Start -- @Description : Called after all services are loaded. ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- function ExampleService : Start () self:DebugLog( \"[Example Service] Started!\" ) end return ExampleService Tabbed code blocks This is a block of tabbed code. Bash 1 2 3 #!/bin/bash STR = \"Hello World!\" echo $STR C 1 2 3 4 5 #include int main(void) { printf( \"hello, world \\n \" ); } C++ 1 2 3 4 5 6 #include <iostream> int main () { std :: cout << \"Hello, world! \\n \" ; return 0 ; } C# 1 2 3 4 5 6 7 using System; class Program { static void Main ( string [] args) { Console.WriteLine( \"Hello, world!\" ); } }","title":"Testing stuff"},{"location":"Test/#the-bottom","text":"Oh no you've reached the bottom!","title":"The bottom"},{"location":"API/Client/","text":"","title":"Framework client API"},{"location":"API/Core/","text":"Core API The APIs here are shared by both the server and client . Properties Config This property stores the framework's configuration settings that were loaded from the settings modules as a dictionary table. Classes This property stores all of the class modulescripts that were loaded into the framework as a dictionary table. Warning This property should not be modified directly. Instead, use the LoadClass or LoadClassesIn methods to load class modules into the framework. Modifying this property directly may result in glitchy behavior. Utils This property stores all of the utility modulescripts that were loaded into the framework as a dictionary table. Warning This property should not be modified directly. Instead, use the LoadUtility or LoadUtilitiesIn methods to load utility modules into the framework. Modifying this property directly may result in glitchy behavior. Version This property stores the current version number of the framework. Methods Log DragonEngine:Log(LogMessage,LogMessageType) -> nil Arguments string \"LogMessage\" : The message to display in the logs. string \"LogMessageType\" : The type of message to display in the logs. Valid types are \"Warning\" and \"Error\". If ommitted, a regular message is sent to the logs. Returns This method returns nil . Description Sends the specified string to the framework logs, as the given log type. Example usage 1 DragonEngine:Log( \"A player has walked beyond the map's barriers, and may be exploiting!\" , \"Warning\" ) DebugLog DragonEngine:DebugLog(LogMessage,LogMessageType) -> nil Arguments string \"LogMessage\" : The message to display in the logs. string \"LogMessageType\" : The type of message to display in the logs. Valid types are \"Warning\" and \"Error\". If ommitted, a regular message is sent to the logs. Returns This method returns nil . Description Sends the specified string to the framework logs, as the given log type. This method only writes to the logs if \"Debug\" is set to true in the framework's configuration settings . Example usage 1 DragonEngine:Log( \"Player weapons registered successfully, running...\" ) LoadClass DragonEngine:LoadClass(ClassModule) -> LoadSuccess Arguments Instance \"ModuleScript\" \"ClassModule\" : The class ModuleScript to load into the framework. Returns bool \"LoadSuccess\" : A bool describing whether or not the class ModuleScript was loaded into the framework successfully. Will be false if there was an error while loading the ModuleScript . Description This method loads the given \"ClassModule\" into the framework and places its table under DragonEngine.Classes . Once loaded, the loaded class can be accessed via DragonEngine.Classes.<ClassName> . Warning If a module with the same name as the class module you are trying to load already exists in DragonEngine.Classes , this method will throw an error. Example usage 1 2 3 4 5 6 -- Script 1 local Class_LoadSuccess = DragonEngine:LoadClass(script.Dog) if not Class_LoadSuccess then warn( \"No one can make any doggos! D:\" ) end 1 2 3 4 5 6 7 8 9 10 -- Script 2 local Dog = DragonEngine.Classes.Dog local MyDog = Dog.new() MyDog.Name = \"Fido\" MyDog.Age = 4 MyDog.Color = \"Brown\" MyDog:Bark() MyDog:WalkTo(Vector3.new( 0 , 0 , 0 )) LoadClassesIn DragonEngine:LoadClassesIn(Container,ThrowError) -> ClassesLoaded,ErrorMessage,FaultyModule Arguments Instance \"Container\" : The container that holds all of the class modules. Valid container types are Folder instances and Model instances. bool \"ThrowError\" : Determines whether or not an error will be thrown if any of the classes in the Container fail to load. Defaults to false . Returns bool \"ClassesLoaded\" : A bool describing whether or not the classes were loaded into the framework successfully. Will be false if an error occured while loading the classes into the framework and ThrowError was true . string \"ErrorMessage\" : An error message containing the error that occured while loading the class modules. Will be nil if no error occured or ThrowError is false . Instance \"ModuleScript\" \"FaultyModule\" : The class modulescript that failed to load. Description This method iterates through the given Container and all of its sub-containers and loads all of the class modules it finds into the framework via DragonEngine:LoadClass() . Example usage 1 2 3 4 5 6 7 8 local ReplicatedStorage = game:GetService( \"ReplicatedStorage\" ) local ClassContainer = ReplicatedStorage.Classes local LoadClasses_Success,ErrorMessage,FaultyClassModule = DragonEngine:LoadClassesIn(ClassContainer, true ) if not LoadClasses_Success then print( \"Failed to load class '\" .. FaultyClasseModule.Name .. \"' : \" .. ErrorMessage) end LoadUtility DragonEngine:LoadUtility(UtilityModule) -> LoadSuccess Arguments Instance \"ModuleScript\" \"UtilityModule\" : The Utility ModuleScript to load into the framework. Returns bool \"LoadSuccess\" : A bool describing whether or not the Utility ModuleScript was loaded into the framework successfully. Will be false if there was an error while loading the ModuleScript . Description This method loads the given \"UtilityModule\" into the framework and places its table under DragonEngine.Utils . Once loaded, the loaded Utility can be accessed via DragonEngine.Utils.<UtilityName> . Warning If a module with the same name as the Utility module you are trying to load already exists in DragonEngine.Utils , this method will throw an error. Example usage 1 2 3 4 5 6 -- Script 1 local Utility_LoadSuccess = DragonEngine:LoadUtility(script.Table) if not Utility_LoadSuccess then warn( \"No handy table functions. :(\" ) end 1 2 3 4 5 6 7 -- Script 2 local PlayerService = game:GetService( \"Players\" ) local Players = PlayerService:GetPlayers() local Table = DragonEngine.Utils.Table Table.Shuffle(Players) print( \"The new order of players is \" .. Table.repr(Players)) LoadUtilitiesIn DragonEngine:LoadUtilitiesIn(Container,ThrowError) -> UtilitiesLoaded,ErrorMessage,FaultyModule Arguments Instance \"Container\" : The container that holds all of the Utility modules. Valid container types are Folder instances and Model instances. bool \"ThrowError\" : Determines whether or not an error will be thrown if any of the Utilities in the Container fail to load. Defaults to false . Returns bool \"UtilitiesLoaded\" : A bool describing whether or not the utlities were loaded into the framework successfully. Will be false if an error occured while loading the utilities into the framework and ThrowError was true . string \"ErrorMessage\" : An error message containing the error that occured while loading the Utility modules. Will be nil if no error occured or ThrowError is false . Instance \"ModuleScript\" \"FaultyModule\" : The Utility modulescript that failed to load. Description This method iterates through the given Container and all of its sub-containers and loads all of the Utility modules it finds into the framework via DragonEngine:LoadUtility() . Example usage 1 2 3 4 5 6 7 8 local ReplicatedStorage = game:GetService( \"ReplicatedStorage\" ) local UtilityContainer = ReplicatedStorage.Utilities local LoadUtilities_Success,ErrorMessage,FaultyUtilityModule = DragonEngine:LoadUtilitiesIn(UtilityContainer, true ) if not LoadUtilities_Success then print( \"Failed to load Utility '\" .. FaultyUtilityeModule.Name .. \"' : \" .. ErrorMessage) end","title":"Framework core API"},{"location":"API/Core/#core-api","text":"The APIs here are shared by both the server and client .","title":"Core API"},{"location":"API/Core/#properties","text":"","title":"Properties"},{"location":"API/Core/#config","text":"This property stores the framework's configuration settings that were loaded from the settings modules as a dictionary table.","title":"Config"},{"location":"API/Core/#classes","text":"This property stores all of the class modulescripts that were loaded into the framework as a dictionary table. Warning This property should not be modified directly. Instead, use the LoadClass or LoadClassesIn methods to load class modules into the framework. Modifying this property directly may result in glitchy behavior.","title":"Classes"},{"location":"API/Core/#utils","text":"This property stores all of the utility modulescripts that were loaded into the framework as a dictionary table. Warning This property should not be modified directly. Instead, use the LoadUtility or LoadUtilitiesIn methods to load utility modules into the framework. Modifying this property directly may result in glitchy behavior.","title":"Utils"},{"location":"API/Core/#version","text":"This property stores the current version number of the framework.","title":"Version"},{"location":"API/Core/#methods","text":"","title":"Methods"},{"location":"API/Core/#log","text":"DragonEngine:Log(LogMessage,LogMessageType) -> nil Arguments string \"LogMessage\" : The message to display in the logs. string \"LogMessageType\" : The type of message to display in the logs. Valid types are \"Warning\" and \"Error\". If ommitted, a regular message is sent to the logs. Returns This method returns nil . Description Sends the specified string to the framework logs, as the given log type. Example usage 1 DragonEngine:Log( \"A player has walked beyond the map's barriers, and may be exploiting!\" , \"Warning\" )","title":"Log"},{"location":"API/Core/#debuglog","text":"DragonEngine:DebugLog(LogMessage,LogMessageType) -> nil Arguments string \"LogMessage\" : The message to display in the logs. string \"LogMessageType\" : The type of message to display in the logs. Valid types are \"Warning\" and \"Error\". If ommitted, a regular message is sent to the logs. Returns This method returns nil . Description Sends the specified string to the framework logs, as the given log type. This method only writes to the logs if \"Debug\" is set to true in the framework's configuration settings . Example usage 1 DragonEngine:Log( \"Player weapons registered successfully, running...\" )","title":"DebugLog"},{"location":"API/Core/#loadclass","text":"DragonEngine:LoadClass(ClassModule) -> LoadSuccess Arguments Instance \"ModuleScript\" \"ClassModule\" : The class ModuleScript to load into the framework. Returns bool \"LoadSuccess\" : A bool describing whether or not the class ModuleScript was loaded into the framework successfully. Will be false if there was an error while loading the ModuleScript . Description This method loads the given \"ClassModule\" into the framework and places its table under DragonEngine.Classes . Once loaded, the loaded class can be accessed via DragonEngine.Classes.<ClassName> . Warning If a module with the same name as the class module you are trying to load already exists in DragonEngine.Classes , this method will throw an error. Example usage 1 2 3 4 5 6 -- Script 1 local Class_LoadSuccess = DragonEngine:LoadClass(script.Dog) if not Class_LoadSuccess then warn( \"No one can make any doggos! D:\" ) end 1 2 3 4 5 6 7 8 9 10 -- Script 2 local Dog = DragonEngine.Classes.Dog local MyDog = Dog.new() MyDog.Name = \"Fido\" MyDog.Age = 4 MyDog.Color = \"Brown\" MyDog:Bark() MyDog:WalkTo(Vector3.new( 0 , 0 , 0 ))","title":"LoadClass"},{"location":"API/Core/#loadclassesin","text":"DragonEngine:LoadClassesIn(Container,ThrowError) -> ClassesLoaded,ErrorMessage,FaultyModule Arguments Instance \"Container\" : The container that holds all of the class modules. Valid container types are Folder instances and Model instances. bool \"ThrowError\" : Determines whether or not an error will be thrown if any of the classes in the Container fail to load. Defaults to false . Returns bool \"ClassesLoaded\" : A bool describing whether or not the classes were loaded into the framework successfully. Will be false if an error occured while loading the classes into the framework and ThrowError was true . string \"ErrorMessage\" : An error message containing the error that occured while loading the class modules. Will be nil if no error occured or ThrowError is false . Instance \"ModuleScript\" \"FaultyModule\" : The class modulescript that failed to load. Description This method iterates through the given Container and all of its sub-containers and loads all of the class modules it finds into the framework via DragonEngine:LoadClass() . Example usage 1 2 3 4 5 6 7 8 local ReplicatedStorage = game:GetService( \"ReplicatedStorage\" ) local ClassContainer = ReplicatedStorage.Classes local LoadClasses_Success,ErrorMessage,FaultyClassModule = DragonEngine:LoadClassesIn(ClassContainer, true ) if not LoadClasses_Success then print( \"Failed to load class '\" .. FaultyClasseModule.Name .. \"' : \" .. ErrorMessage) end","title":"LoadClassesIn"},{"location":"API/Core/#loadutility","text":"DragonEngine:LoadUtility(UtilityModule) -> LoadSuccess Arguments Instance \"ModuleScript\" \"UtilityModule\" : The Utility ModuleScript to load into the framework. Returns bool \"LoadSuccess\" : A bool describing whether or not the Utility ModuleScript was loaded into the framework successfully. Will be false if there was an error while loading the ModuleScript . Description This method loads the given \"UtilityModule\" into the framework and places its table under DragonEngine.Utils . Once loaded, the loaded Utility can be accessed via DragonEngine.Utils.<UtilityName> . Warning If a module with the same name as the Utility module you are trying to load already exists in DragonEngine.Utils , this method will throw an error. Example usage 1 2 3 4 5 6 -- Script 1 local Utility_LoadSuccess = DragonEngine:LoadUtility(script.Table) if not Utility_LoadSuccess then warn( \"No handy table functions. :(\" ) end 1 2 3 4 5 6 7 -- Script 2 local PlayerService = game:GetService( \"Players\" ) local Players = PlayerService:GetPlayers() local Table = DragonEngine.Utils.Table Table.Shuffle(Players) print( \"The new order of players is \" .. Table.repr(Players))","title":"LoadUtility"},{"location":"API/Core/#loadutilitiesin","text":"DragonEngine:LoadUtilitiesIn(Container,ThrowError) -> UtilitiesLoaded,ErrorMessage,FaultyModule Arguments Instance \"Container\" : The container that holds all of the Utility modules. Valid container types are Folder instances and Model instances. bool \"ThrowError\" : Determines whether or not an error will be thrown if any of the Utilities in the Container fail to load. Defaults to false . Returns bool \"UtilitiesLoaded\" : A bool describing whether or not the utlities were loaded into the framework successfully. Will be false if an error occured while loading the utilities into the framework and ThrowError was true . string \"ErrorMessage\" : An error message containing the error that occured while loading the Utility modules. Will be nil if no error occured or ThrowError is false . Instance \"ModuleScript\" \"FaultyModule\" : The Utility modulescript that failed to load. Description This method iterates through the given Container and all of its sub-containers and loads all of the Utility modules it finds into the framework via DragonEngine:LoadUtility() . Example usage 1 2 3 4 5 6 7 8 local ReplicatedStorage = game:GetService( \"ReplicatedStorage\" ) local UtilityContainer = ReplicatedStorage.Utilities local LoadUtilities_Success,ErrorMessage,FaultyUtilityModule = DragonEngine:LoadUtilitiesIn(UtilityContainer, true ) if not LoadUtilities_Success then print( \"Failed to load Utility '\" .. FaultyUtilityeModule.Name .. \"' : \" .. ErrorMessage) end","title":"LoadUtilitiesIn"},{"location":"API/ExampleAPI/","text":"Methods Roact.createElement 1 Roact.createElement(component, [props, [children]]) -> RoactElement Creates a new Roact element representing the given component . Elements are lightweight descriptions about what a Roblox Instance should look like, like a blueprint! The children argument is shorthand for adding a Roact.Children key to props . It should be specified as a dictionary of names to elements. component can be a string, a function, or a table created by Component:extend . Caution Make sure not to modify props or children after they're passed into createElement ! Roact.createFragment Added in 1.0.0 1 Roact.createFragment(elements) -> RoactFragment Creates a new Roact fragment with the provided table of elements. Fragments allow grouping of elements without the need for intermediate containing objects like Frame s. Caution Make sure not to modify elements after they're passed into createFragment ! Roact.mount 1 Roact.mount(element, [parent, [key]]) -> RoactTree Info Roact.mount is also available via the deprecated alias Roact.reify . It will be removed in a future release. Creates a Roblox Instance given a Roact element, and optionally a parent to put it in, and a key to use as the instance's Name . The result is a RoactTree , which is an opaque handle that represents a tree of components owned by Roact. You can pass this to APIs like Roact.unmount . It'll also be used for future debugging APIs. Roact.update 1 Roact.update(tree, element) -> RoactTree Info Roact.update is also available via the deprecated alias Roact.reconcile . It will be removed in a future release. Updates an existing instance handle with a new element, returning a new handle. This can be used to update a UI created with Roact.mount by passing in a new element with new props. update can be used to change the props of a component instance created with mount and is useful for putting Roact content into non-Roact applications. As of Roact 1.0, the returned RoactTree object will always be the same value as the one passed in. Roact.unmount 1 Roact.unmount(tree) -> void Info Roact.unmount is also available via the deprecated alias Roact.teardown . It will be removed in a future release. Destroys the given RoactTree and all of its descendants. Does not operate on a Roblox Instance -- this must be given a handle that was returned by Roact.mount . Roact.oneChild Roact.oneChild(children) -> RoactElement | nil Given a dictionary of children, returns a single child element. If children contains more than one child, oneChild function will throw an error. This is intended to denote an error when using the component using oneChild . If children is nil or contains no children, oneChild will return nil . Roact.createBinding Added in 1.0.0 1 2 3 Roact.createBinding(initialValue) -> Binding, updateFunction where updateFunction: (newValue) -> () The first value returned is a Binding object, which will typically be passed as a prop to a Roact host component. The second is a function that can be called with a new value to update the binding. A Binding has the following API: getValue 1 Binding:getValue() -> value Returns the internal value of the binding. This is helpful when updating a binding relative to its current value. Warning Using getValue inside a component's render method is dangerous! Using the unwrapped value directly won't allow Roact to subscribe to a binding's updates. To guarantee that a bound value will update, use the binding itself for your prop value. map 1 2 3 Binding:map(mappingFunction) -> Binding where mappingFunction: (value) -> mappedValue Returns a new binding that maps the existing binding's value to something else. For example, map can be used to transform an animation progress value like 0.4 into a property that can be consumed by a Roblox Instance like UDim2.new(0.4, 0, 1, 0) . Roact.joinBindings Added in 1.1.0 1 2 3 Roact.joinBindings(bindings) -> Binding where bindings: { [any]: Binding } Combines multiple bindings into a single binding. The new binding's value will have the same keys as the input table of bindings. joinBindings is usually used alongside Binding:map : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 local function Flex () local aSize, setASize = Roact.createBinding(Vector2.new()) local bSize, setBSize = Roact.createBinding(Vector2.new()) return Roact.createElement( \"Frame\" , { Size = Roact.joinBindings({aSize, bSize}):map( function (sizes) local sum = Vector2.new() for _, size in ipairs(sizes) do sum = sum + size end return UDim2.new( 0 , sum.X, 0 , sum.Y) end ), }, { A = Roact.createElement( \"Frame\" , { Size = UDim2.new( 1 , 0 , 0 , 30 ), [Roact.Change.AbsoluteSize] = function (instance) setASize(instance.Size) end , }), B = Roact.createElement( \"Frame\" , { Size = UDim2.new( 1 , 0 , 0 , 30 ), Position = aSize:map( function (size) return UDim2.new( 0 , 0 , 0 , size.Y) end ), [Roact.Change.AbsoluteSize] = function (instance) setBSize(instance.Size) end , }), }) end Roact.createRef 1 Roact.createRef() -> Ref Creates a new reference object that can be used with Roact.Ref . Roact.setGlobalConfig 1 Roact.setGlobalConfig(configValues: Dictionary<string, bool>) -> void The entry point for configuring Roact. Roact currently applies this to everything using this instance of Roact, so be careful using this with a project that has multiple consumers of Roact. Once config values are set, they will apply from then on. This is primarily useful when developing as it can enable features that validate your code more strictly. Most of the settings here incur a performance cost and should typically be disabled in production environments. Call this method once at the root of your project (before mounting any Roact elements): 1 2 3 4 Roact.setGlobalConfig({ typeChecks = true , propValidation = true , }) The following are the valid config keys that can be used, and what they do. typeChecks Enables type checks for Roact's public interface. This includes some of the following: Check that the props and children arguments to Roact.createElement are both tables or nil Check that setState is passing self as the first argument (it should be called like self:setState(...) ) Confirm the Roact.mount 's first argument is a Roact element And much more! internalTypeChecks Enables type checks for internal functionality of Roact. This is typically only useful when debugging Roact itself. It will run similar type checks to those mentioned above, but only the private portion of the API. elementTracing When enabled, Roact will capture a stack trace at the site of each element creation and hold onto it, using it to provide additional details on certain kinds of errors. If you get an error that says \" \", try enabling this config value to help with debugging. Enabling elementTracing also allows the use of the getElementTraceback method on Component, which can also be helpful for debugging. propValidation Enables validation of props via the validateProps method on components. With this flag enabled, any validation written by component authors in a component's validateProps method will be run on every prop change. This is helpful during development for making sure components are being used correctly. Constants Roact.Children This is the key that Roact uses internally to store the children that are attached to a Roact element. If you're writing a new function component or stateful component that renders children like a host component, you can access Roact.Children in your props table. Roact.Ref Use Roact.Ref as a key into the props of a host element to receive a handle to the underlying Roblox Instance. Assign this key to a ref created with createRef : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 local ExampleComponent = Roact.Component:extend( \"ExampleComponent\" ) function ExampleComponent : init () -- Create a ref. self.ref = Roact.createRef() end function ExampleComponent : render () return Roact.createElement( \"Frame\" , { -- Use the ref to point to this rendered instance. [Roact.Ref] = self.ref, }) end function ExampleComponent : didMount () -- Refs are a kind of binding, so we can access the Roblox Instance using getValue. print( \"Roblox Instance\" , self.ref:getValue()) end Info Ref objects have a deprecated field called current that is always equal to the result of getValue . Assigning to the current field is not allowed. The field will be removed in a future release. Alternatively, you can assign it to a function instead: 1 2 3 4 5 6 Roact.createElement( \"Frame\" , { -- The provided function will be called whenever the rendered instance changes. [Roact.Ref] = function (rbx) print( \"Roblox Instance\" , rbx) end , }) Warning When Roact.Ref is given a function, Roact does not guarantee when this function will be run relative to the reconciliation of other props. If you try to read a Roblox property that's being set via a Roact prop, you won't know if you're reading it before or after Roact updates that prop! Warning When Roact.Ref is given a function, it will be called with nil when the component instance is destroyed! See the refs guide for more details. Roact.Event Index into Roact.Event to receive a key that can be used to connect to events when creating host elements: 1 2 3 4 5 Roact.createElement( \"ImageButton\" , { [Roact.Event.MouseButton1Click] = function (rbx, x, y) print(rbx, \"clicked at position\" , x, y) end , }) Info Event callbacks receive the Roblox Instance as the first parameter, followed by any parameters yielded by the event. Warning When connecting to the Changed event, be careful not to call setState or other functions that will trigger renders. This will cause Roact to re-render during a render, and errors will be thrown! See the events guide for more details. Roact.Change Index into Roact.Change to receive a key that can be used to connect to GetPropertyChangedSignal events. It's similar to Roact.Event : 1 2 3 4 5 Roact.createElement( \"ScrollingFrame\" , { [Roact.Change.CanvasPosition] = function (rbx) print( \"ScrollingFrame scrolled to\" , rbx.CanvasPosition) end , }) Warning Property changed events are fired by Roact during the reconciliation phase. Be careful not to accidentally trigger a re-render in the middle of a re-render, or an error will be thrown! Roact.None Roact.None is a special value that can be used to clear elements from your component state when calling setState or returning from getDerivedStateFromProps . In Lua tables, removing a field from state is not possible by setting its value to nil because nil values mean the same thing as no value at all. If a field needs to be removed from state, it can be set to Roact.None when calling setState , which will ensure that the resulting state no longer contains it: 1 2 3 4 5 function MyComponent : didMount () self:setState({ fieldToRemove = Roact.None }) end Component Types Roact.Component The base component instance that can be extended to make stateful components. Call Roact.Component:extend(\"ComponentName\") to make a new stateful component with a given name. Roact.PureComponent An extension of Roact.Component that only re-renders if its props or state change. PureComponent implements the shouldUpdate lifecycle event with a shallow equality comparison. It's optimized for use with immutable data structures, which makes it a perfect fit for use with frameworks like Rodux. PureComponent is not always faster, but can often result in significant performance improvements when used correctly. Roact.Portal A component that represents a portal to a Roblox Instance. Portals are created using Roact.createElement . Any children of a portal are put inside the Roblox Instance specified by the required target prop. That Roblox Instance should not be one created by Roact. Portals are useful for creating dialogs managed by deeply-nested UI components, and enable Roact to represent and manage multiple disjoint trees at once. See the Portals guide for a small tutorial and more details about portals. Component API defaultProps 1 static defaultProps: Dictionary<any, any> If defaultProps is defined on a stateful component, any props that aren't specified when a component is created will be taken from there. init 1 init(initialProps) -> void init is called exactly once when a new instance of a component is created. It can be used to set up the initial state , as well as any non- render related values directly on the component. Use setState inside of init to set up your initial component state: 1 2 3 4 5 6 function MyComponent : init () self:setState({ position = 0 , velocity = 10 }) end In older versions of Roact, setState was disallowed in init , and you would instead assign to state directly. It's simpler to use setState , but assigning directly to state is still acceptable inside init : 1 2 3 4 5 6 function MyComponent : init () self.state = { position = 0 , velocity = 10 } end render 1 render() -> Element | nil render describes what a component should display at the current instant in time. Info Roact assumes that render act likes a pure function: the result of render must depend only on props and state , and it must not have side-effects. 1 2 3 4 5 6 7 8 9 10 11 12 13 function MyComponent : render () -- This is okay: return Roact.createElement( \"TextLabel\" , { Text = self.props.text, Position = self.state.position }) -- Ack! Depending on values outside props/state is not allowed! return Roact.createElement( \"TextLabel\" , { Text = self.someText, Position = getMousePosition(), }) end render must be defined for all components. The default implementation of render throws an error; if your component does not render anything, define a render function that returns nil explicitly. This helps make sure that you don't forget to define render ! 1 2 3 function MyComponent : render () return nil end setState 1 setState(stateUpdater | stateChange) -> void setState requests an update to the component's state. Roact may schedule this update for a later time or resolve it immediately. If a function is passed to setState , that function will be called with the current state and props as arguments: 1 2 3 4 5 6 7 function MyComponent : didMount () self:setState( function (prevState, props) return { counter = prevState.counter + 1 } end ) end If this function returns nil , Roact will not schedule a re-render and no state will be updated. If a table is passed to setState , the values in that table will be merged onto the existing state: 1 2 3 4 5 function MyComponent : didMount () self:setState({ foo = \"bar\" }) end Setting a field in the state to Roact.None will clear it from the state. This is the only way to remove a field from a component's state! Warning setState can be called from anywhere except : Lifecycle hooks: willUnmount , willUpdate Pure functions: render , shouldUpdate Calling setState inside of init has special behavior. The result of setState will be used to determine initial state, and no additional updates will be scheduled. Roact may support calling setState in currently-disallowed places in the future. Warning setState does not always resolve synchronously! Roact may batch and reschedule state updates in order to reduce the number of total renders. When depending on the previous value of state, like when incrementing a counter, use the functional form to guarantee that all state updates occur! This behavior will be similar to the future behavior of React 17. See: RFClarification: why is setState asynchronous? Does React keep the order for state updates? shouldUpdate 1 shouldUpdate(nextProps, nextState) -> bool shouldUpdate provides a way to override Roact's rerendering heuristics. By default, components are re-rendered any time a parent component updates, or when state is updated via setState . PureComponent implements shouldUpdate to only trigger a re-render any time the props are different based on shallow equality. In a future Roact update, all components may implement this check by default. validateProps Added in 1.0.0 1 static validateProps(props) -> (false, message: string) | true validateProps is an optional method that can be implemented for a component. It provides a mechanism for verifying inputs passed into the component. Every time props are updated, validateProps will be called with the new props before proceeding to shouldUpdate or init . It should return the same parameters that assert expects: a boolean, true if the props passed validation, false if they did not, plus a message explaining why they failed. If the first return value is true, the second value is ignored. For performance reasons, property validation is disabled by default. To use this feature, enable propValidation via setGlobalConfig : 1 2 3 Roact.setGlobalConfig({ propValidation = true }) See setGlobalConfig for more details. Warning Depending on the implementation, validateProps can impact performance. Recommended practice is to enable prop validation during development and leave it off in production environments. getElementTraceback 1 getElementTraceback() -> string | nil getElementTraceback gets the stack trace that the component was created in. This allows you to report error messages accurately. Lifecycle Methods In addition to the base Component API, Roact exposes additional lifecycle methods that stateful components can hook into to be notified of various steps in the rendering process. didMount 1 didMount() -> void didMount is fired after the component finishes its initial render. At this point, all associated Roblox Instances have been created, and all components have finished mounting. didMount is a good place to start initial network communications, attach events to services, or modify the Roblox Instance hierarchy. willUnmount 1 willUnmount() -> void willUnmount is fired right before Roact begins unmounting a component instance's children. willUnmount acts like a component's destructor, and is a good place to disconnect any manually-connected events. willUpdate 1 willUpdate(nextProps, nextState) -> void willUpdate is fired after an update is started but before a component's state and props are updated. didUpdate 1 didUpdate(previousProps, previousState) -> void didUpdate is fired after at the end of an update. At this point, Roact has updated the properties of any Roblox Instances and the component instance's props and state are up to date. didUpdate is a good place to send network requests or dispatch Rodux actions, but make sure to compare self.props and self.state with previousProps and previousState to avoid triggering too many updates. getDerivedStateFromProps 1 static getDerivedStateFromProps(nextProps, lastState) -> nextStateSlice Used to recalculate any state that depends on being synchronized with props . Generally, you should use didUpdate to respond to props changing. If you find yourself copying props values to state as-is, consider using props or memoization instead. getDerivedStateFromProps should return a table that contains the part of the state that should be updated. 1 2 3 4 5 function MyComponent . getDerivedStateFromProps (nextProps, lastState) return { someValue = nextProps.someValue } end As with setState , you can set use the constant Roact.None to remove a field from the state. Note getDerivedStateFromProps is a static lifecycle method. It does not have access to self , and must be a pure function.","title":"ExampleAPI"},{"location":"API/ExampleAPI/#methods","text":"","title":"Methods"},{"location":"API/ExampleAPI/#roactcreateelement","text":"1 Roact.createElement(component, [props, [children]]) -> RoactElement Creates a new Roact element representing the given component . Elements are lightweight descriptions about what a Roblox Instance should look like, like a blueprint! The children argument is shorthand for adding a Roact.Children key to props . It should be specified as a dictionary of names to elements. component can be a string, a function, or a table created by Component:extend . Caution Make sure not to modify props or children after they're passed into createElement !","title":"Roact.createElement"},{"location":"API/ExampleAPI/#roactcreatefragment","text":"Added in 1.0.0 1 Roact.createFragment(elements) -> RoactFragment Creates a new Roact fragment with the provided table of elements. Fragments allow grouping of elements without the need for intermediate containing objects like Frame s. Caution Make sure not to modify elements after they're passed into createFragment !","title":"Roact.createFragment"},{"location":"API/ExampleAPI/#roactmount","text":"1 Roact.mount(element, [parent, [key]]) -> RoactTree Info Roact.mount is also available via the deprecated alias Roact.reify . It will be removed in a future release. Creates a Roblox Instance given a Roact element, and optionally a parent to put it in, and a key to use as the instance's Name . The result is a RoactTree , which is an opaque handle that represents a tree of components owned by Roact. You can pass this to APIs like Roact.unmount . It'll also be used for future debugging APIs.","title":"Roact.mount"},{"location":"API/ExampleAPI/#roactupdate","text":"1 Roact.update(tree, element) -> RoactTree Info Roact.update is also available via the deprecated alias Roact.reconcile . It will be removed in a future release. Updates an existing instance handle with a new element, returning a new handle. This can be used to update a UI created with Roact.mount by passing in a new element with new props. update can be used to change the props of a component instance created with mount and is useful for putting Roact content into non-Roact applications. As of Roact 1.0, the returned RoactTree object will always be the same value as the one passed in.","title":"Roact.update"},{"location":"API/ExampleAPI/#roactunmount","text":"1 Roact.unmount(tree) -> void Info Roact.unmount is also available via the deprecated alias Roact.teardown . It will be removed in a future release. Destroys the given RoactTree and all of its descendants. Does not operate on a Roblox Instance -- this must be given a handle that was returned by Roact.mount .","title":"Roact.unmount"},{"location":"API/ExampleAPI/#roactonechild","text":"Roact.oneChild(children) -> RoactElement | nil Given a dictionary of children, returns a single child element. If children contains more than one child, oneChild function will throw an error. This is intended to denote an error when using the component using oneChild . If children is nil or contains no children, oneChild will return nil .","title":"Roact.oneChild"},{"location":"API/ExampleAPI/#roactcreatebinding","text":"Added in 1.0.0 1 2 3 Roact.createBinding(initialValue) -> Binding, updateFunction where updateFunction: (newValue) -> () The first value returned is a Binding object, which will typically be passed as a prop to a Roact host component. The second is a function that can be called with a new value to update the binding. A Binding has the following API:","title":"Roact.createBinding"},{"location":"API/ExampleAPI/#getvalue","text":"1 Binding:getValue() -> value Returns the internal value of the binding. This is helpful when updating a binding relative to its current value. Warning Using getValue inside a component's render method is dangerous! Using the unwrapped value directly won't allow Roact to subscribe to a binding's updates. To guarantee that a bound value will update, use the binding itself for your prop value.","title":"getValue"},{"location":"API/ExampleAPI/#map","text":"1 2 3 Binding:map(mappingFunction) -> Binding where mappingFunction: (value) -> mappedValue Returns a new binding that maps the existing binding's value to something else. For example, map can be used to transform an animation progress value like 0.4 into a property that can be consumed by a Roblox Instance like UDim2.new(0.4, 0, 1, 0) .","title":"map"},{"location":"API/ExampleAPI/#roactjoinbindings","text":"Added in 1.1.0 1 2 3 Roact.joinBindings(bindings) -> Binding where bindings: { [any]: Binding } Combines multiple bindings into a single binding. The new binding's value will have the same keys as the input table of bindings. joinBindings is usually used alongside Binding:map : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 local function Flex () local aSize, setASize = Roact.createBinding(Vector2.new()) local bSize, setBSize = Roact.createBinding(Vector2.new()) return Roact.createElement( \"Frame\" , { Size = Roact.joinBindings({aSize, bSize}):map( function (sizes) local sum = Vector2.new() for _, size in ipairs(sizes) do sum = sum + size end return UDim2.new( 0 , sum.X, 0 , sum.Y) end ), }, { A = Roact.createElement( \"Frame\" , { Size = UDim2.new( 1 , 0 , 0 , 30 ), [Roact.Change.AbsoluteSize] = function (instance) setASize(instance.Size) end , }), B = Roact.createElement( \"Frame\" , { Size = UDim2.new( 1 , 0 , 0 , 30 ), Position = aSize:map( function (size) return UDim2.new( 0 , 0 , 0 , size.Y) end ), [Roact.Change.AbsoluteSize] = function (instance) setBSize(instance.Size) end , }), }) end","title":"Roact.joinBindings"},{"location":"API/ExampleAPI/#roactcreateref","text":"1 Roact.createRef() -> Ref Creates a new reference object that can be used with Roact.Ref .","title":"Roact.createRef"},{"location":"API/ExampleAPI/#roactsetglobalconfig","text":"1 Roact.setGlobalConfig(configValues: Dictionary<string, bool>) -> void The entry point for configuring Roact. Roact currently applies this to everything using this instance of Roact, so be careful using this with a project that has multiple consumers of Roact. Once config values are set, they will apply from then on. This is primarily useful when developing as it can enable features that validate your code more strictly. Most of the settings here incur a performance cost and should typically be disabled in production environments. Call this method once at the root of your project (before mounting any Roact elements): 1 2 3 4 Roact.setGlobalConfig({ typeChecks = true , propValidation = true , }) The following are the valid config keys that can be used, and what they do.","title":"Roact.setGlobalConfig"},{"location":"API/ExampleAPI/#typechecks","text":"Enables type checks for Roact's public interface. This includes some of the following: Check that the props and children arguments to Roact.createElement are both tables or nil Check that setState is passing self as the first argument (it should be called like self:setState(...) ) Confirm the Roact.mount 's first argument is a Roact element And much more!","title":"typeChecks"},{"location":"API/ExampleAPI/#internaltypechecks","text":"Enables type checks for internal functionality of Roact. This is typically only useful when debugging Roact itself. It will run similar type checks to those mentioned above, but only the private portion of the API.","title":"internalTypeChecks"},{"location":"API/ExampleAPI/#elementtracing","text":"When enabled, Roact will capture a stack trace at the site of each element creation and hold onto it, using it to provide additional details on certain kinds of errors. If you get an error that says \" \", try enabling this config value to help with debugging. Enabling elementTracing also allows the use of the getElementTraceback method on Component, which can also be helpful for debugging.","title":"elementTracing"},{"location":"API/ExampleAPI/#propvalidation","text":"Enables validation of props via the validateProps method on components. With this flag enabled, any validation written by component authors in a component's validateProps method will be run on every prop change. This is helpful during development for making sure components are being used correctly.","title":"propValidation"},{"location":"API/ExampleAPI/#constants","text":"","title":"Constants"},{"location":"API/ExampleAPI/#roactchildren","text":"This is the key that Roact uses internally to store the children that are attached to a Roact element. If you're writing a new function component or stateful component that renders children like a host component, you can access Roact.Children in your props table.","title":"Roact.Children"},{"location":"API/ExampleAPI/#roactref","text":"Use Roact.Ref as a key into the props of a host element to receive a handle to the underlying Roblox Instance. Assign this key to a ref created with createRef : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 local ExampleComponent = Roact.Component:extend( \"ExampleComponent\" ) function ExampleComponent : init () -- Create a ref. self.ref = Roact.createRef() end function ExampleComponent : render () return Roact.createElement( \"Frame\" , { -- Use the ref to point to this rendered instance. [Roact.Ref] = self.ref, }) end function ExampleComponent : didMount () -- Refs are a kind of binding, so we can access the Roblox Instance using getValue. print( \"Roblox Instance\" , self.ref:getValue()) end Info Ref objects have a deprecated field called current that is always equal to the result of getValue . Assigning to the current field is not allowed. The field will be removed in a future release. Alternatively, you can assign it to a function instead: 1 2 3 4 5 6 Roact.createElement( \"Frame\" , { -- The provided function will be called whenever the rendered instance changes. [Roact.Ref] = function (rbx) print( \"Roblox Instance\" , rbx) end , }) Warning When Roact.Ref is given a function, Roact does not guarantee when this function will be run relative to the reconciliation of other props. If you try to read a Roblox property that's being set via a Roact prop, you won't know if you're reading it before or after Roact updates that prop! Warning When Roact.Ref is given a function, it will be called with nil when the component instance is destroyed! See the refs guide for more details.","title":"Roact.Ref"},{"location":"API/ExampleAPI/#roactevent","text":"Index into Roact.Event to receive a key that can be used to connect to events when creating host elements: 1 2 3 4 5 Roact.createElement( \"ImageButton\" , { [Roact.Event.MouseButton1Click] = function (rbx, x, y) print(rbx, \"clicked at position\" , x, y) end , }) Info Event callbacks receive the Roblox Instance as the first parameter, followed by any parameters yielded by the event. Warning When connecting to the Changed event, be careful not to call setState or other functions that will trigger renders. This will cause Roact to re-render during a render, and errors will be thrown! See the events guide for more details.","title":"Roact.Event"},{"location":"API/ExampleAPI/#roactchange","text":"Index into Roact.Change to receive a key that can be used to connect to GetPropertyChangedSignal events. It's similar to Roact.Event : 1 2 3 4 5 Roact.createElement( \"ScrollingFrame\" , { [Roact.Change.CanvasPosition] = function (rbx) print( \"ScrollingFrame scrolled to\" , rbx.CanvasPosition) end , }) Warning Property changed events are fired by Roact during the reconciliation phase. Be careful not to accidentally trigger a re-render in the middle of a re-render, or an error will be thrown!","title":"Roact.Change"},{"location":"API/ExampleAPI/#roactnone","text":"Roact.None is a special value that can be used to clear elements from your component state when calling setState or returning from getDerivedStateFromProps . In Lua tables, removing a field from state is not possible by setting its value to nil because nil values mean the same thing as no value at all. If a field needs to be removed from state, it can be set to Roact.None when calling setState , which will ensure that the resulting state no longer contains it: 1 2 3 4 5 function MyComponent : didMount () self:setState({ fieldToRemove = Roact.None }) end","title":"Roact.None"},{"location":"API/ExampleAPI/#component-types","text":"","title":"Component Types"},{"location":"API/ExampleAPI/#roactcomponent","text":"The base component instance that can be extended to make stateful components. Call Roact.Component:extend(\"ComponentName\") to make a new stateful component with a given name.","title":"Roact.Component"},{"location":"API/ExampleAPI/#roactpurecomponent","text":"An extension of Roact.Component that only re-renders if its props or state change. PureComponent implements the shouldUpdate lifecycle event with a shallow equality comparison. It's optimized for use with immutable data structures, which makes it a perfect fit for use with frameworks like Rodux. PureComponent is not always faster, but can often result in significant performance improvements when used correctly.","title":"Roact.PureComponent"},{"location":"API/ExampleAPI/#roactportal","text":"A component that represents a portal to a Roblox Instance. Portals are created using Roact.createElement . Any children of a portal are put inside the Roblox Instance specified by the required target prop. That Roblox Instance should not be one created by Roact. Portals are useful for creating dialogs managed by deeply-nested UI components, and enable Roact to represent and manage multiple disjoint trees at once. See the Portals guide for a small tutorial and more details about portals.","title":"Roact.Portal"},{"location":"API/ExampleAPI/#component-api","text":"","title":"Component API"},{"location":"API/ExampleAPI/#defaultprops","text":"1 static defaultProps: Dictionary<any, any> If defaultProps is defined on a stateful component, any props that aren't specified when a component is created will be taken from there.","title":"defaultProps"},{"location":"API/ExampleAPI/#init","text":"1 init(initialProps) -> void init is called exactly once when a new instance of a component is created. It can be used to set up the initial state , as well as any non- render related values directly on the component. Use setState inside of init to set up your initial component state: 1 2 3 4 5 6 function MyComponent : init () self:setState({ position = 0 , velocity = 10 }) end In older versions of Roact, setState was disallowed in init , and you would instead assign to state directly. It's simpler to use setState , but assigning directly to state is still acceptable inside init : 1 2 3 4 5 6 function MyComponent : init () self.state = { position = 0 , velocity = 10 } end","title":"init"},{"location":"API/ExampleAPI/#render","text":"1 render() -> Element | nil render describes what a component should display at the current instant in time. Info Roact assumes that render act likes a pure function: the result of render must depend only on props and state , and it must not have side-effects. 1 2 3 4 5 6 7 8 9 10 11 12 13 function MyComponent : render () -- This is okay: return Roact.createElement( \"TextLabel\" , { Text = self.props.text, Position = self.state.position }) -- Ack! Depending on values outside props/state is not allowed! return Roact.createElement( \"TextLabel\" , { Text = self.someText, Position = getMousePosition(), }) end render must be defined for all components. The default implementation of render throws an error; if your component does not render anything, define a render function that returns nil explicitly. This helps make sure that you don't forget to define render ! 1 2 3 function MyComponent : render () return nil end","title":"render"},{"location":"API/ExampleAPI/#setstate","text":"1 setState(stateUpdater | stateChange) -> void setState requests an update to the component's state. Roact may schedule this update for a later time or resolve it immediately. If a function is passed to setState , that function will be called with the current state and props as arguments: 1 2 3 4 5 6 7 function MyComponent : didMount () self:setState( function (prevState, props) return { counter = prevState.counter + 1 } end ) end If this function returns nil , Roact will not schedule a re-render and no state will be updated. If a table is passed to setState , the values in that table will be merged onto the existing state: 1 2 3 4 5 function MyComponent : didMount () self:setState({ foo = \"bar\" }) end Setting a field in the state to Roact.None will clear it from the state. This is the only way to remove a field from a component's state! Warning setState can be called from anywhere except : Lifecycle hooks: willUnmount , willUpdate Pure functions: render , shouldUpdate Calling setState inside of init has special behavior. The result of setState will be used to determine initial state, and no additional updates will be scheduled. Roact may support calling setState in currently-disallowed places in the future. Warning setState does not always resolve synchronously! Roact may batch and reschedule state updates in order to reduce the number of total renders. When depending on the previous value of state, like when incrementing a counter, use the functional form to guarantee that all state updates occur! This behavior will be similar to the future behavior of React 17. See: RFClarification: why is setState asynchronous? Does React keep the order for state updates?","title":"setState"},{"location":"API/ExampleAPI/#shouldupdate","text":"1 shouldUpdate(nextProps, nextState) -> bool shouldUpdate provides a way to override Roact's rerendering heuristics. By default, components are re-rendered any time a parent component updates, or when state is updated via setState . PureComponent implements shouldUpdate to only trigger a re-render any time the props are different based on shallow equality. In a future Roact update, all components may implement this check by default.","title":"shouldUpdate"},{"location":"API/ExampleAPI/#validateprops","text":"Added in 1.0.0 1 static validateProps(props) -> (false, message: string) | true validateProps is an optional method that can be implemented for a component. It provides a mechanism for verifying inputs passed into the component. Every time props are updated, validateProps will be called with the new props before proceeding to shouldUpdate or init . It should return the same parameters that assert expects: a boolean, true if the props passed validation, false if they did not, plus a message explaining why they failed. If the first return value is true, the second value is ignored. For performance reasons, property validation is disabled by default. To use this feature, enable propValidation via setGlobalConfig : 1 2 3 Roact.setGlobalConfig({ propValidation = true }) See setGlobalConfig for more details. Warning Depending on the implementation, validateProps can impact performance. Recommended practice is to enable prop validation during development and leave it off in production environments.","title":"validateProps"},{"location":"API/ExampleAPI/#getelementtraceback","text":"1 getElementTraceback() -> string | nil getElementTraceback gets the stack trace that the component was created in. This allows you to report error messages accurately.","title":"getElementTraceback"},{"location":"API/ExampleAPI/#lifecycle-methods","text":"In addition to the base Component API, Roact exposes additional lifecycle methods that stateful components can hook into to be notified of various steps in the rendering process.","title":"Lifecycle Methods"},{"location":"API/ExampleAPI/#didmount","text":"1 didMount() -> void didMount is fired after the component finishes its initial render. At this point, all associated Roblox Instances have been created, and all components have finished mounting. didMount is a good place to start initial network communications, attach events to services, or modify the Roblox Instance hierarchy.","title":"didMount"},{"location":"API/ExampleAPI/#willunmount","text":"1 willUnmount() -> void willUnmount is fired right before Roact begins unmounting a component instance's children. willUnmount acts like a component's destructor, and is a good place to disconnect any manually-connected events.","title":"willUnmount"},{"location":"API/ExampleAPI/#willupdate","text":"1 willUpdate(nextProps, nextState) -> void willUpdate is fired after an update is started but before a component's state and props are updated.","title":"willUpdate"},{"location":"API/ExampleAPI/#didupdate","text":"1 didUpdate(previousProps, previousState) -> void didUpdate is fired after at the end of an update. At this point, Roact has updated the properties of any Roblox Instances and the component instance's props and state are up to date. didUpdate is a good place to send network requests or dispatch Rodux actions, but make sure to compare self.props and self.state with previousProps and previousState to avoid triggering too many updates.","title":"didUpdate"},{"location":"API/ExampleAPI/#getderivedstatefromprops","text":"1 static getDerivedStateFromProps(nextProps, lastState) -> nextStateSlice Used to recalculate any state that depends on being synchronized with props . Generally, you should use didUpdate to respond to props changing. If you find yourself copying props values to state as-is, consider using props or memoization instead. getDerivedStateFromProps should return a table that contains the part of the state that should be updated. 1 2 3 4 5 function MyComponent . getDerivedStateFromProps (nextProps, lastState) return { someValue = nextProps.someValue } end As with setState , you can set use the constant Roact.None to remove a field from the state. Note getDerivedStateFromProps is a static lifecycle method. It does not have access to self , and must be a pure function.","title":"getDerivedStateFromProps"},{"location":"API/Server/","text":"Server API The APIs here are only available on the server. They are not accessable to the client . Properties There are currently no server-specific properties. Methods GetService Depreciated This method is depreciated and can be removed at any time. It should not be used. DragonEngine:GetService(ServiceName) -> Service Arguments string \"ServiceName\" : The name of the service to get. Returns table \"Service\" : The service that was retrieved. Will be nil if no service with the specified ServiceName was found. Description This method returns the requested service. It is similiar to game:GetService() . Example usage 1 2 3 4 5 6 7 8 9 10 11 12 local Players = game:GetService( \"Players\" ) local DataService = DragonEngine:GetService( \"DataService\" ) local MyData = { Coins = 120 , Level = 4 , Weapons = { {Name = \"Axe\" , Material = \"Diamond\" }, {Name = \"Sword\" , Material = \"Diamond\" } } } DataService:SaveData(Players.SomePlayer,MyData) LoadService DragonEngine:LoadService(ServiceModule) -> ServiceLoaded,ErrorMessage Arguments Instance \"ModuleScript\" \"ServiceModule\" : The service module to load into the framework. Returns bool \"ServiceLoaded\" : A bool describing whether or not the service was loaded into the framework successfully. Will be false if an error occured while loading the service into the framework. string \"ErrorMessage\" : An error message containing the error that occured while loading the service module. Will be nil if no error occured. Description This method loads the given ServiceModule into the framework and places its table under DragonEngine.Services . Once loaded, the service can be accessed via DragonEngine.Services.<ServiceName> . Warning If a service with the same name as the service module you are trying to load already exists in DragonEngine.Services , this method will throw an error. Example usage 1 2 3 4 5 6 7 8 local ServerScriptService = game:GetService( \"ServerScriptService\" ) local MyService = ServerScriptService.Services.MyService local ServiceLoad_Success,ErrorMessage = DragonEngine:LoadService(MyService) if not ServiceLoad_Success then warn( \"Failed to load service 'MyService' : \" .. ErrorMessage) end LoadServicesIn DragonEngine:LoadServicesIn(Container,ThrowError) -> ServicesLoaded,ErrorMessage,FaultyModule Arguments Instance \"Container\" : The container that holds all of the service modules. Valid container types are Folder instances and Model instances. bool \"ThrowError\" : Determines whether or not an error will be thrown if any of the services in the Container fail to load. Defaults to false . Returns bool \"ServicesLoaded\" : A bool describing whether or not the services were loaded into the framework successfully. Will be false if an error occured while loading the services into the framework and ThrowError was true . string \"ErrorMessage\" : An error message containing the error that occured while loading the service modules. Will be nil if no error occured or ThrowError is false . Instance \"ModuleScript\" \"FaultyModule\" : The service modulescript that failed to load. Description This method iterates through the given Container and all of its sub-containers and loads all of the service modules it finds into the framework via DragonEngine:LoadService() . Example usage 1 2 3 4 5 6 7 8 local ServerScriptService = game:GetService( \"ServerScriptService\" ) local ServiceContainer = ServerScriptService.Services local LoadServices_Success,ErrorMessage,FaultyServiceModule = DragonEngine:LoadServicesIn(ServiceContainerk, true ) if not LoadServices_Success then print( \"Failed to load service '\" .. FaultyServiceModule.Name .. \"' : \" .. ErrorMessage) end UnloadService DragonEngine:UnloadService(ServiceName) -> ServiceUnloaded,ErrorMessage Arguments string \"ServiceName\" : The name of the service to unload from the framework. Returns bool \"ServiceUnloaded\" : A bool describing whether or not the service was unloaded from the framework successfully. Will be false if an error occured while unloading the service from the framework. string \"ErrorMessage\" : An error message containing the error that occured while unoading the service. Description This method unloads the given service from the framework. If the given service is currently running when this method is called, the service will be stopped first via DragonEngine:StopService() . Example usage 1 2 3 4 5 local StopService_Success,ErrorMessage = DragonEngine:StopService( \"MyService\" ) if not StopService_Success then print( \"Failed to unload service 'MyService' : \" .. ErrorMessage) end","title":"Framework server API"},{"location":"API/Server/#server-api","text":"The APIs here are only available on the server. They are not accessable to the client .","title":"Server API"},{"location":"API/Server/#properties","text":"There are currently no server-specific properties.","title":"Properties"},{"location":"API/Server/#methods","text":"","title":"Methods"},{"location":"API/Server/#getservice","text":"Depreciated This method is depreciated and can be removed at any time. It should not be used. DragonEngine:GetService(ServiceName) -> Service Arguments string \"ServiceName\" : The name of the service to get. Returns table \"Service\" : The service that was retrieved. Will be nil if no service with the specified ServiceName was found. Description This method returns the requested service. It is similiar to game:GetService() . Example usage 1 2 3 4 5 6 7 8 9 10 11 12 local Players = game:GetService( \"Players\" ) local DataService = DragonEngine:GetService( \"DataService\" ) local MyData = { Coins = 120 , Level = 4 , Weapons = { {Name = \"Axe\" , Material = \"Diamond\" }, {Name = \"Sword\" , Material = \"Diamond\" } } } DataService:SaveData(Players.SomePlayer,MyData)","title":"GetService"},{"location":"API/Server/#loadservice","text":"DragonEngine:LoadService(ServiceModule) -> ServiceLoaded,ErrorMessage Arguments Instance \"ModuleScript\" \"ServiceModule\" : The service module to load into the framework. Returns bool \"ServiceLoaded\" : A bool describing whether or not the service was loaded into the framework successfully. Will be false if an error occured while loading the service into the framework. string \"ErrorMessage\" : An error message containing the error that occured while loading the service module. Will be nil if no error occured. Description This method loads the given ServiceModule into the framework and places its table under DragonEngine.Services . Once loaded, the service can be accessed via DragonEngine.Services.<ServiceName> . Warning If a service with the same name as the service module you are trying to load already exists in DragonEngine.Services , this method will throw an error. Example usage 1 2 3 4 5 6 7 8 local ServerScriptService = game:GetService( \"ServerScriptService\" ) local MyService = ServerScriptService.Services.MyService local ServiceLoad_Success,ErrorMessage = DragonEngine:LoadService(MyService) if not ServiceLoad_Success then warn( \"Failed to load service 'MyService' : \" .. ErrorMessage) end","title":"LoadService"},{"location":"API/Server/#loadservicesin","text":"DragonEngine:LoadServicesIn(Container,ThrowError) -> ServicesLoaded,ErrorMessage,FaultyModule Arguments Instance \"Container\" : The container that holds all of the service modules. Valid container types are Folder instances and Model instances. bool \"ThrowError\" : Determines whether or not an error will be thrown if any of the services in the Container fail to load. Defaults to false . Returns bool \"ServicesLoaded\" : A bool describing whether or not the services were loaded into the framework successfully. Will be false if an error occured while loading the services into the framework and ThrowError was true . string \"ErrorMessage\" : An error message containing the error that occured while loading the service modules. Will be nil if no error occured or ThrowError is false . Instance \"ModuleScript\" \"FaultyModule\" : The service modulescript that failed to load. Description This method iterates through the given Container and all of its sub-containers and loads all of the service modules it finds into the framework via DragonEngine:LoadService() . Example usage 1 2 3 4 5 6 7 8 local ServerScriptService = game:GetService( \"ServerScriptService\" ) local ServiceContainer = ServerScriptService.Services local LoadServices_Success,ErrorMessage,FaultyServiceModule = DragonEngine:LoadServicesIn(ServiceContainerk, true ) if not LoadServices_Success then print( \"Failed to load service '\" .. FaultyServiceModule.Name .. \"' : \" .. ErrorMessage) end","title":"LoadServicesIn"},{"location":"API/Server/#unloadservice","text":"DragonEngine:UnloadService(ServiceName) -> ServiceUnloaded,ErrorMessage Arguments string \"ServiceName\" : The name of the service to unload from the framework. Returns bool \"ServiceUnloaded\" : A bool describing whether or not the service was unloaded from the framework successfully. Will be false if an error occured while unloading the service from the framework. string \"ErrorMessage\" : An error message containing the error that occured while unoading the service. Description This method unloads the given service from the framework. If the given service is currently running when this method is called, the service will be stopped first via DragonEngine:StopService() . Example usage 1 2 3 4 5 local StopService_Success,ErrorMessage = DragonEngine:StopService( \"MyService\" ) if not StopService_Success then print( \"Failed to unload service 'MyService' : \" .. ErrorMessage) end","title":"UnloadService"},{"location":"About/Contributing/","text":"Contributing to Dragon Engine Dragon Engine depends on and grows with contributions from developers and users in the Roblox open source community. Contributions can be made in a number of ways, a few examples are: Code patches via pull requests Documentation improvements Code of Conduct We expect everyone to use the Contributor Covenant Code of Conduct . Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at BinaryByte.DEV@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Contributing"},{"location":"About/Contributing/#contributing-to-dragon-engine","text":"Dragon Engine depends on and grows with contributions from developers and users in the Roblox open source community. Contributions can be made in a number of ways, a few examples are: Code patches via pull requests Documentation improvements","title":"Contributing to Dragon Engine"},{"location":"About/Contributing/#code-of-conduct","text":"We expect everyone to use the Contributor Covenant Code of Conduct .","title":"Code of Conduct"},{"location":"About/Contributing/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"About/Contributing/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"About/Contributing/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"About/Contributing/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"About/Contributing/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at BinaryByte.DEV@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"About/Contributing/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"About/License/","text":"License Dragon Engine falls under the MIT license. For licensing on any 3rd party dependencies or projects used in this framework, please refer to their respective repositories. MIT License Copyright (c) 2019 Jayden Charbonneau Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"About/License/#license","text":"Dragon Engine falls under the MIT license. For licensing on any 3rd party dependencies or projects used in this framework, please refer to their respective repositories. MIT License Copyright (c) 2019 Jayden Charbonneau Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"About/ReleaseNotes/","text":"Release Notes All of our release notes for each release of the framework are documented here. Version X.X.X (YYYY-MM-DD) Thing changed. And the change was awesome. Another thing changed. Not backwards compatible This update is not backwards compatible. Details Yeah. You heard me. Learn to upgrade noobs. Version 1.0 (2018-08-03) Major Additions to Version 1.0 Internal Refactor of Pages, Files, and Navigation Internal handling of pages, files and navigation has been completely refactored. The changes included in the refactor are summarized below. Support for hidden pages. All Markdown pages are now included in the build regardless of whether they are included in the navigation configuration (#699). The navigation can now include links to external sites (#989 #1373 & #1406). Page data (including titles) is properly determined for all pages before any page is rendered (#1347). Automatically populated navigation now sorts index pages to the top. In other words, The index page will be listed as the first child of a directory, while all other documents are sorted alphanumerically by file name after the index page (#73 & #1042). A README.md file is now treated as an index file within a directory and will be rendered to index.html (#608). The URLs for all files are computed once and stored in a files collection. This ensures all internal links are always computed correctly regardless of the configuration. This also allows all internal links to be validated, not just links to other Markdown pages. (#842 & #872). A new url template filter smartly ensures all URLs are relative to the current page (#1526). An on_files plugin event has been added, which could be used to include files not in the docs_dir , exclude files, redefine page URLs (i.e. implement extensionless URLs), or to manipulate files in various other ways. Backward Incompatible Changes As part of the internal refactor, a number of backward incompatible changes have been introduced, which are summarized below. URLS have changed when use_directory_urls is False Previously, all Markdown pages would be have their filenames altered to be index pages regardless of how the use_directory_urls setting was configured. However, the path munging is only needed when use_directory_urls is set to True (the default). The path mungling no longer happens when use_directory_urls is set to False , which will result in different URLs for all pages that were not already index files. As this behavior only effects a non-default configuration, and the most common user-case for setting the option to False is for local file system ( file:// ) browsing, its not likely to effect most users. However, if you have use_directory_urls set to False for a MkDocs site hosted on a web server, most of your URLs will now be broken. As you can see below, the new URLs are much more sensible. Markdown file Old URL New URL index.md index.html index.html foo.md foo/index.html foo.html foo/bar.md foo/bar/index.html foo/bar.html Note that there has been no change to URLs or file paths when use_directory_urls is set to True (the default), except that MkDocs more consistently includes an ending slash on all internally generated URLs. The pages configuration setting has been renamed to nav The pages configuration setting is deprecated and will issue a warning if set in the configuration file. The setting has been renamed nav . To update your configuration, simply rename the setting to nav . In other words, if your configuration looked like this: 1 2 3 pages : - Home : index.md - User Guide : user-guide.md Simply edit the configuration as follows: 1 2 3 nav : - Home : index.md - User Guide : user-guide.md In the current release, any configuration which includes a pages setting, but no nav setting, the pages configuration will be copied to nav and a warning will be issued. However, in a future release, that may no longer happen. If both pages and nav are defined, the pages setting will be ignored. Template variables and base_url In previous versions of MkDocs some URLs expected the base_url template variable to be prepended to the URL and others did not. That inconsistency has been removed in that no URLs are modified before being added to the template context. For example, a theme template might have previously included a link to the site_name as: 1 <a href=\" {{ nav.homepage.url }} \"> {{ config.site_name }} </a> And MkDocs would magically return a URL for the homepage which was relative to the current page. That \"magic\" has been removed and the url template filter should be used: 1 <a href=\" {{ nav.homepage.url | url }} \"> {{ config.site_name }} </a> This change applies to any navigation items and pages, as well as the page.next_page and page.previous_page attributes. For the time being, the extra_javascript and extra_css variables continue to work as previously (without the url template filter), but they have been deprecated and the corresponding configuration values ( config.extra_javascript and config.extra_css respectively) should be used with the filter instead. 1 2 3 {% for path in config [ 'extra_css' ] %} <link href=\" {{ path | url }} \" rel=\"stylesheet\"> {% endfor %} Note that navigation can now include links to external sites. Obviously, the base_url should not be prepended to these items. However, the url template filter is smart enough to recognize the URL is absolute and does not alter it. Therefore, all navigation items can be passed to the filter and only those that need to will be altered. 1 2 3 {% for nav_item in nav %} <a href=\" {{ nav_item.url | url }} \"> {{ nav_item.title }} </a> {% endfor %} Path Based Settings are Relative to Configuration File (#543) Previously any relative paths in the various configuration options were resolved relative to the current working directory. They are now resolved relative to the configuration file. As the documentation has always encouraged running the various MkDocs commands from the directory that contains the configuration file (project root), this change will not affect most users. However, it will make it much easier to implement automated builds or otherwise run commands from a location other than the project root. Simply use the -f/--config-file option and point it at the configuration file: 1 mkdocs build --config-file /path/to/my/config/file.yml As previously, if no file is specified, MkDocs looks for a file named mkdocs.yml in the current working directory. Added support for YAML Meta-Data (#1542) Previously, MkDocs only supported MultiMarkdown style meta-data, which does not recognize different data types and is rather limited. MkDocs now also supports YAML style meta-data in Markdown documents. MkDocs relies on the the presence or absence of the deliminators ( --- or ... ) to determine whether YAML style meta-data or MultiMarkdown style meta-data is being used. Previously MkDocs would recognize MultiMarkdown style meta-data between the deliminators. Now, if the deliminators are detected, but the content between the deliminators is not valid YAML meta-data, MkDocs does not attempt to parse the content as MultiMarkdown style meta-data. Therefore, MultiMarkdowns style meta-data must not include the deliminators. See the MultiMarkdown style meta-data documentation for details. Prior to version 0.17, MkDocs returned all meta-data values as a list of strings (even a single line would return a list of one string). In version 0.17, that behavior was changed to return each value as a single string (multiple lines were joined), which some users found limiting (see #1471). That behavior continues for MultiMarkdown style meta-data in the current version. However, YAML style meta-data supports the full range of \"safe\" YAML data types. Therefore, it is recommended that any complex meta-data make use of the YAML style (see the YAML style meta-data documentation for details). In fact, a future version of MkDocs may deprecate support for MultiMarkdown style meta-data. Refactor Search Plugin The search plugin has been completely refactored to include support for the following features: Use a web worker in the browser with a fallback (#1396). Optionally pre-build search index locally (#859 & #1061). Upgrade to lunr.js 2.x (#1319). Support search in languages other than English (#826). Allow the user to define the word separators (#867). Only run searches for queries of length > 2 (#1127). Remove dependency on require.js (#1218). Compress the search index (#1128). Users can review the configuration options available and theme authors should review how search and themes interact. theme_dir Configuration Option fully Deprecated As of version 0.17, the [custom_dir] option replaced the deprecated theme_dir option. If users had set the theme_dir option, MkDocs version 0.17 copied the value to the theme.custom_dir option and a warning was issued. As of version 1.0, the value is no longer copied and an error is raised. Other Changes and Additions to Version 1.0 Keyboard shortcuts changed to not conflict with commonly used accessibility shortcuts (#1502.) User friendly YAML parse errors (#1543). Officially support Python 3.7. A missing theme configuration file now raises an error. Empty extra_css and extra_javascript settings no longer raise a warning. Add highlight.js configuration settings to built-in themes (#1284). Close search modal when result is selected (#1527). Add a level attribute to AnchorLinks (#1272). Add MkDocs version check to gh-deploy script (#640). Improve Markdown extension error messages. (#782). Drop official support for Python 3.3 and set tornado>=5.0 (#1427). Add support for GitLab edit links (#1435). Link to GitHub issues from release notes (#644). Expand {sha} and {version} in gh-deploy commit message (#1410). Compress sitemap.xml (#1130). Defer loading JS scripts (#1380). Add a title attribute to the search input (#1379). Update RespondJS to latest version (#1398). Always load Google Analytics over HTTPS (#1397). Improve scrolling frame rate (#1394). Provide more version info. (#1393). Refactor writing-your-docs.md (#1392). Workaround Safari bug when zooming to < 100% (#1389). Remove addition of clicky class to body and animations. (#1387). Prevent search plugin from reinjecting extra_javascript files (#1388). Refactor copy_media_files util function for more flexibility (#1370). Remove PyPI Deployment Docs (#1360). Update links to Python-Markdown library (#1360). Document how to generate manpages for MkDocs commands (#686).","title":"Release Notes"},{"location":"About/ReleaseNotes/#release-notes","text":"All of our release notes for each release of the framework are documented here.","title":"Release Notes"},{"location":"About/ReleaseNotes/#version-xxx-yyyy-mm-dd","text":"Thing changed. And the change was awesome. Another thing changed.","title":"Version X.X.X (YYYY-MM-DD)"},{"location":"About/ReleaseNotes/#not-backwards-compatible","text":"This update is not backwards compatible.","title":"Not backwards compatible"},{"location":"About/ReleaseNotes/#details","text":"Yeah. You heard me. Learn to upgrade noobs.","title":"Details"},{"location":"About/ReleaseNotes/#version-10-2018-08-03","text":"","title":"Version 1.0 (2018-08-03)"},{"location":"About/ReleaseNotes/#major-additions-to-version-10","text":"","title":"Major Additions to Version 1.0"},{"location":"About/ReleaseNotes/#internal-refactor-of-pages-files-and-navigation","text":"Internal handling of pages, files and navigation has been completely refactored. The changes included in the refactor are summarized below. Support for hidden pages. All Markdown pages are now included in the build regardless of whether they are included in the navigation configuration (#699). The navigation can now include links to external sites (#989 #1373 & #1406). Page data (including titles) is properly determined for all pages before any page is rendered (#1347). Automatically populated navigation now sorts index pages to the top. In other words, The index page will be listed as the first child of a directory, while all other documents are sorted alphanumerically by file name after the index page (#73 & #1042). A README.md file is now treated as an index file within a directory and will be rendered to index.html (#608). The URLs for all files are computed once and stored in a files collection. This ensures all internal links are always computed correctly regardless of the configuration. This also allows all internal links to be validated, not just links to other Markdown pages. (#842 & #872). A new url template filter smartly ensures all URLs are relative to the current page (#1526). An on_files plugin event has been added, which could be used to include files not in the docs_dir , exclude files, redefine page URLs (i.e. implement extensionless URLs), or to manipulate files in various other ways.","title":"Internal Refactor of Pages, Files, and Navigation"},{"location":"About/ReleaseNotes/#backward-incompatible-changes","text":"As part of the internal refactor, a number of backward incompatible changes have been introduced, which are summarized below.","title":"Backward Incompatible Changes"},{"location":"About/ReleaseNotes/#urls-have-changed-when-use_directory_urls-is-false","text":"Previously, all Markdown pages would be have their filenames altered to be index pages regardless of how the use_directory_urls setting was configured. However, the path munging is only needed when use_directory_urls is set to True (the default). The path mungling no longer happens when use_directory_urls is set to False , which will result in different URLs for all pages that were not already index files. As this behavior only effects a non-default configuration, and the most common user-case for setting the option to False is for local file system ( file:// ) browsing, its not likely to effect most users. However, if you have use_directory_urls set to False for a MkDocs site hosted on a web server, most of your URLs will now be broken. As you can see below, the new URLs are much more sensible. Markdown file Old URL New URL index.md index.html index.html foo.md foo/index.html foo.html foo/bar.md foo/bar/index.html foo/bar.html Note that there has been no change to URLs or file paths when use_directory_urls is set to True (the default), except that MkDocs more consistently includes an ending slash on all internally generated URLs.","title":"URLS have changed when use_directory_urls is False"},{"location":"About/ReleaseNotes/#the-pages-configuration-setting-has-been-renamed-to-nav","text":"The pages configuration setting is deprecated and will issue a warning if set in the configuration file. The setting has been renamed nav . To update your configuration, simply rename the setting to nav . In other words, if your configuration looked like this: 1 2 3 pages : - Home : index.md - User Guide : user-guide.md Simply edit the configuration as follows: 1 2 3 nav : - Home : index.md - User Guide : user-guide.md In the current release, any configuration which includes a pages setting, but no nav setting, the pages configuration will be copied to nav and a warning will be issued. However, in a future release, that may no longer happen. If both pages and nav are defined, the pages setting will be ignored.","title":"The pages configuration setting has been renamed to nav"},{"location":"About/ReleaseNotes/#template-variables-and-base_url","text":"In previous versions of MkDocs some URLs expected the base_url template variable to be prepended to the URL and others did not. That inconsistency has been removed in that no URLs are modified before being added to the template context. For example, a theme template might have previously included a link to the site_name as: 1 <a href=\" {{ nav.homepage.url }} \"> {{ config.site_name }} </a> And MkDocs would magically return a URL for the homepage which was relative to the current page. That \"magic\" has been removed and the url template filter should be used: 1 <a href=\" {{ nav.homepage.url | url }} \"> {{ config.site_name }} </a> This change applies to any navigation items and pages, as well as the page.next_page and page.previous_page attributes. For the time being, the extra_javascript and extra_css variables continue to work as previously (without the url template filter), but they have been deprecated and the corresponding configuration values ( config.extra_javascript and config.extra_css respectively) should be used with the filter instead. 1 2 3 {% for path in config [ 'extra_css' ] %} <link href=\" {{ path | url }} \" rel=\"stylesheet\"> {% endfor %} Note that navigation can now include links to external sites. Obviously, the base_url should not be prepended to these items. However, the url template filter is smart enough to recognize the URL is absolute and does not alter it. Therefore, all navigation items can be passed to the filter and only those that need to will be altered. 1 2 3 {% for nav_item in nav %} <a href=\" {{ nav_item.url | url }} \"> {{ nav_item.title }} </a> {% endfor %}","title":"Template variables and base_url"},{"location":"About/ReleaseNotes/#path-based-settings-are-relative-to-configuration-file-543","text":"Previously any relative paths in the various configuration options were resolved relative to the current working directory. They are now resolved relative to the configuration file. As the documentation has always encouraged running the various MkDocs commands from the directory that contains the configuration file (project root), this change will not affect most users. However, it will make it much easier to implement automated builds or otherwise run commands from a location other than the project root. Simply use the -f/--config-file option and point it at the configuration file: 1 mkdocs build --config-file /path/to/my/config/file.yml As previously, if no file is specified, MkDocs looks for a file named mkdocs.yml in the current working directory.","title":"Path Based Settings are Relative to Configuration File (#543)"},{"location":"About/ReleaseNotes/#added-support-for-yaml-meta-data-1542","text":"Previously, MkDocs only supported MultiMarkdown style meta-data, which does not recognize different data types and is rather limited. MkDocs now also supports YAML style meta-data in Markdown documents. MkDocs relies on the the presence or absence of the deliminators ( --- or ... ) to determine whether YAML style meta-data or MultiMarkdown style meta-data is being used. Previously MkDocs would recognize MultiMarkdown style meta-data between the deliminators. Now, if the deliminators are detected, but the content between the deliminators is not valid YAML meta-data, MkDocs does not attempt to parse the content as MultiMarkdown style meta-data. Therefore, MultiMarkdowns style meta-data must not include the deliminators. See the MultiMarkdown style meta-data documentation for details. Prior to version 0.17, MkDocs returned all meta-data values as a list of strings (even a single line would return a list of one string). In version 0.17, that behavior was changed to return each value as a single string (multiple lines were joined), which some users found limiting (see #1471). That behavior continues for MultiMarkdown style meta-data in the current version. However, YAML style meta-data supports the full range of \"safe\" YAML data types. Therefore, it is recommended that any complex meta-data make use of the YAML style (see the YAML style meta-data documentation for details). In fact, a future version of MkDocs may deprecate support for MultiMarkdown style meta-data.","title":"Added support for YAML Meta-Data (#1542)"},{"location":"About/ReleaseNotes/#refactor-search-plugin","text":"The search plugin has been completely refactored to include support for the following features: Use a web worker in the browser with a fallback (#1396). Optionally pre-build search index locally (#859 & #1061). Upgrade to lunr.js 2.x (#1319). Support search in languages other than English (#826). Allow the user to define the word separators (#867). Only run searches for queries of length > 2 (#1127). Remove dependency on require.js (#1218). Compress the search index (#1128). Users can review the configuration options available and theme authors should review how search and themes interact.","title":"Refactor Search Plugin"},{"location":"About/ReleaseNotes/#theme_dir-configuration-option-fully-deprecated","text":"As of version 0.17, the [custom_dir] option replaced the deprecated theme_dir option. If users had set the theme_dir option, MkDocs version 0.17 copied the value to the theme.custom_dir option and a warning was issued. As of version 1.0, the value is no longer copied and an error is raised.","title":"theme_dir Configuration Option fully Deprecated"},{"location":"About/ReleaseNotes/#other-changes-and-additions-to-version-10","text":"Keyboard shortcuts changed to not conflict with commonly used accessibility shortcuts (#1502.) User friendly YAML parse errors (#1543). Officially support Python 3.7. A missing theme configuration file now raises an error. Empty extra_css and extra_javascript settings no longer raise a warning. Add highlight.js configuration settings to built-in themes (#1284). Close search modal when result is selected (#1527). Add a level attribute to AnchorLinks (#1272). Add MkDocs version check to gh-deploy script (#640). Improve Markdown extension error messages. (#782). Drop official support for Python 3.3 and set tornado>=5.0 (#1427). Add support for GitLab edit links (#1435). Link to GitHub issues from release notes (#644). Expand {sha} and {version} in gh-deploy commit message (#1410). Compress sitemap.xml (#1130). Defer loading JS scripts (#1380). Add a title attribute to the search input (#1379). Update RespondJS to latest version (#1398). Always load Google Analytics over HTTPS (#1397). Improve scrolling frame rate (#1394). Provide more version info. (#1393). Refactor writing-your-docs.md (#1392). Workaround Safari bug when zooming to < 100% (#1389). Remove addition of clicky class to body and animations. (#1387). Prevent search plugin from reinjecting extra_javascript files (#1388). Refactor copy_media_files util function for more flexibility (#1370). Remove PyPI Deployment Docs (#1360). Update links to Python-Markdown library (#1360). Document how to generate manpages for MkDocs commands (#686).","title":"Other Changes and Additions to Version 1.0"}]}