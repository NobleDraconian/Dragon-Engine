"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[256],{29175:e=>{e.exports=JSON.parse('{"functions":[{"name":"GetService","desc":"Returns a reference to the specified service. Similar to `game:GetService()` in the Roblox API.\\n```lua\\nlocal MarketService = DragonEngine:GetService(\\"MarketService\\")\\nMarketService:GiveItem(SomePlayer,\\"HealthPotion\\",5)\\n```","params":[{"name":"ServiceName","desc":"The name of the service to get a reference to","lua_type":"string"}],"returns":[{"desc":"The service with the given name","lua_type":"Service"}],"function_type":"method","source":{"line":112,"path":"src/Server/Core/DragonEngine.lua"}},{"name":"LoadService","desc":"Loads the given service module into the framework, making it accessible via `DragonEngineServer:GetService()`.\\n```lua\\nlocal Success,Error = DragonEngine:LoadService(ServerScriptService.Services.AvatarService)\\nif not Success then\\n\\tprint(\\"Failed to load AvatarService : \\" .. Error)\\nend\\n```","params":[{"name":"ServiceModule","desc":"The service modulescript to load into the framework","lua_type":"ModuleScript"}],"returns":[{"desc":"A `bool` describing whether or not the service was successfully loaded","lua_type":"bool"},{"desc":"A `string` containing the error message if the service failed to load. Will be `nil` if the load is successful.","lua_type":"string"}],"function_type":"method","private":true,"source":{"line":134,"path":"src/Server/Core/DragonEngine.lua"}},{"name":"LoadServicesIn","desc":"Loads all services in the given container via `DragonEngine:LoadService()`.\\n```lua\\nDragonEngine:LoadServicesIn(ServerScriptService.Services)\\n```\\n:::caution\\nOnly modules that are children of a `Model` or `Folder` instance will be considered for lazy-loading. Other instance types\\nare not supported at this time.\\n:::","params":[{"name":"Container","desc":"The folder that contains the service modules","lua_type":"Folder"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","private":true,"source":{"line":248,"path":"src/Server/Core/DragonEngine.lua"}},{"name":"UnloadService","desc":"Unloads the specified service from the framework and destroys any remotes/bindables it created.\\nThis API will attempt to call `DragonEngine:StopService()` with the service before unloading it, to clean state.\\n```lua\\nlocal Success,Error = DragonEngine:UnloadService(\\"MemeService\\")\\nif not Success then\\n\\tprint(\\"Failed to unload memeservice : \\" .. Error)\\nend\\n```","params":[{"name":"ServiceName","desc":"The name of the service to unload","lua_type":"string"}],"returns":[{"desc":"A `bool` describing whether or not the service was successfully unloaded","lua_type":"bool"},{"desc":"A `string` containing the error message if the service fails to be unloaded. Is `nil` if unloading succeeded.","lua_type":"string"}],"function_type":"method","private":true,"source":{"line":269,"path":"src/Server/Core/DragonEngine.lua"}},{"name":"InitializeService","desc":"Calls `:Init()` on the specified service.\\n```lua\\nlocal Success,Error = DragonEngine:InitializeService(\\"MarketService\\")\\nif not Success then\\n\\tprint(\\"Failed to initialize marketservice : \\" .. Error)\\nend\\n```","params":[{"name":"ServiceName","desc":"The name of the service to initialize","lua_type":"string"}],"returns":[{"desc":"A `bool` describing whether or not the service was successfully initialized","lua_type":"bool"},{"desc":"A `string` containing the error message if the service fails to be initialized. Is `nil` if initialization succeeded.","lua_type":"string"}],"function_type":"method","private":true,"source":{"line":346,"path":"src/Server/Core/DragonEngine.lua"}},{"name":"PostInitService","desc":"Calls `:PostInit()` on the specified service.\\n```lua\\nlocal Success,Error = DragonEngine:PostInitService(\\"MarketService\\")\\nif not Success then\\n\\tprint(\\"Failed to post-init marketservice : \\" .. Error)\\nend\\n```","params":[{"name":"ServiceName","desc":"The name of the service to post-init","lua_type":"string"}],"returns":[{"desc":"A `bool` describing whether or not the service had post-init called successfully","lua_type":"bool"},{"desc":"A `string` containing the error message if the service fails to run post-init. Is `nil` if post-init was successful.","lua_type":"string"}],"function_type":"method","private":true,"source":{"line":413,"path":"src/Server/Core/DragonEngine.lua"}},{"name":"StartService","desc":"Calls `:Start()` on the specified service.\\n```lua\\nlocal Success,Error = DragonEngine:StartService(\\"MarketService\\")\\nif not Success then\\n\\tprint(\\"Failed to start marketservice : \\" .. Error)\\nend\\n```","params":[{"name":"ServiceName","desc":"The name of the service to start","lua_type":"string"}],"returns":[{"desc":"A `bool` describing whether or not the service was successfully started.","lua_type":"bool"},{"desc":"A `string` containing the error message if the service fails to successfully start. Is `nil` if start was successful.","lua_type":"string"}],"function_type":"method","private":true,"source":{"line":478,"path":"src/Server/Core/DragonEngine.lua"}},{"name":"StopService","desc":"Calls `:Stop()` on the specified service\\n```lua\\nlocal Success,Error = DragonEngine:StopService(\\"MarketService\\")\\nif not Success then\\n\\tprint(\\"Failed to stop marketservice : \\" .. Error)\\nend\\n```","params":[{"name":"ServiceName","desc":"The name of the service to stop","lua_type":"string"}],"returns":[{"desc":"A `bool` describing whether or not the service was successfully stopped","lua_type":"bool"},{"desc":"A `string` containing the error message if the service fails to stop. Will be `nil` if the stop is successful.","lua_type":"string"}],"function_type":"method","private":true,"source":{"line":545,"path":"src/Server/Core/DragonEngine.lua"}},{"name":"RegisterClientEndpoint","desc":"Registers a RemoteFunction for the calling service that the server can invoke to get client information.\\n```lua\\nlocal MyRemote = DragonEngine:RegisterClientEndpoint(\\"MyRemote\\")\\nlocal LikesJazz = MyRemote:InvokeClient(Player,\\"Do ya like jazz?\\")\\n```\\n:::warning\\nThis API should only be called from a service! Calling it outside of a service will cause errors.\\n:::\\n:::caution\\nUse with caution! Using the client as a source of truth is dangerous and often bad practice.\\n:::","params":[{"name":"EndpointName","desc":"The name to assign to the endpoint","lua_type":"string"}],"returns":[{"desc":"The RemoteFunction that was registered with the framework","lua_type":"RemoteFunction"}],"function_type":"method","source":{"line":611,"path":"src/Server/Core/DragonEngine.lua"}},{"name":"RegisterServiceClientEvent","desc":"Registers a RemoteEvent for the calling service that the server can fire to clients.\\n```lua\\nlocal AnnouncementRemote = DragonEngine:RegisterServiceClientEvent(\\"AnnouncementMade\\")\\nAnnouncementRemote:FireAllClients(\\"Teh epic duck is coming!!!\\")\\n```\\n:::warning\\nThis API should only be called from a service! Calling it outside of a service will cause errors.\\n:::","params":[{"name":"Name","desc":"The name to assign to the RemoteEvent","lua_type":"string"}],"returns":[{"desc":"The RemoteEvent that was registered with the framework","lua_type":"RemoteEvent"}],"function_type":"method","source":{"line":648,"path":"src/Server/Core/DragonEngine.lua"}},{"name":"RegisterServiceServerEvent","desc":"Registers a BindableEvent for the calling service that it can use to fire server-side events.\\n```lua\\nlocal ItemSpawnedBindable = DragonEngine:RegisterServiceServerEvent(\\"ItemSpawned\\")\\nItemSpawnedBindable:Fire(ItemID,ItemPosition)\\n```\\n:::warning\\nThis API should only be called from a service! Calling it outside of a service will cause errors.\\n:::","params":[{"name":"Name","desc":"The name to assign to the BindableEvent","lua_type":"string"}],"returns":[{"desc":"The BindableEvent that was registered with the framework","lua_type":"BindableEvent"}],"function_type":"method","source":{"line":685,"path":"src/Server/Core/DragonEngine.lua"}},{"name":"Run","desc":"Runs the framework. Services will be loaded & ran from the service locations specified in the framework\'s settings,\\nand modules will be marked for lazyloading from the locations specified in the framework\'s settings.\\n```lua\\nDragonEngine:Run()\\n```\\n:::warning\\nThis API should only be called once! Calling it more than once will result in unstable behavior.\\n:::\\n:::warning\\nIf the framework is accessed before this API is ran, nothing will have been initialized!\\n:::","params":[{"name":"FrameworkSettings","desc":"The settings to configure the framework\'s behavior","lua_type":"FrameworkSettings"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":727,"path":"src/Server/Core/DragonEngine.lua"}}],"properties":[],"types":[{"name":"Service","desc":"The server-facing part of a microservice.","fields":[{"name":"Client","lua_type":"ServiceClient","desc":"The client-facing part of the service"},{"name":"Init","lua_type":"function","desc":"The service\'s `Init` method."},{"name":"Start","lua_type":"function","desc":"The service\'s `Start` method."},{"name":"...","lua_type":"function","desc":"The service\'s various defined methods."}],"source":{"line":15,"path":"src/Server/Core/DragonEngine.lua"}},{"name":"ServiceClient","desc":"The client-facing part of a microservice.","fields":[{"name":"Server","lua_type":"Service","desc":"A reference to the service\'s server-facing APIs. Will be `nil` on the client."},{"name":"...","lua_type":"function","desc":"The service\'s various defined client-facing APIs."}],"source":{"line":22,"path":"src/Server/Core/DragonEngine.lua"}},{"name":"ServerPaths","desc":"The folders that the framework will look in when attempting to load services & modules.\\nHere\'s an example of a valid ServerPaths configuration:\\n```lua\\n{\\n\\tModulePaths = {\\n\\t\\tServer = {\\n\\t\\t\\tServerScriptService.Modules,\\n\\t\\t},\\n\\t\\tShared = {\\n\\t\\t\\tReplicatedStorage.Modules,\\n\\t\\t}\\n\\t},\\n\\tServicePaths = {\\n\\t\\tServerScriptService.Services\\n\\t}\\n}\\n```\\nFor more information, see [server paths](../docs/Configuration#server-paths).","fields":[{"name":"ModulePaths","lua_type":"table","desc":"The folders that the framework will lazyload modules from"},{"name":"ServicePaths","lua_type":"table","desc":"The folders that the framework will load services from"}],"source":{"line":46,"path":"src/Server/Core/DragonEngine.lua"}}],"name":"DragonEngineServer","desc":"Handles the server sided aspects of the framework such as services, creating remotes, etc.","realm":["Server"],"source":{"line":7,"path":"src/Server/Core/DragonEngine.lua"}}')}}]);